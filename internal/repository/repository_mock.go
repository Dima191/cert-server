// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/repository.go
//
// Generated by this command:
//
//	mockgen -source ./internal/repository/repository.go -destination ./internal/repository/repository_mock.go
//

// Package mock_certrepository is a generated GoMock package.
package certrepository

import (
	context "context"
	models "github.com/Dima191/cert-server/internal/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Cert mocks base method.
func (m *MockRepository) Cert(ctx context.Context, domain string) (*models.Cert, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cert", ctx, domain)
	ret0, _ := ret[0].(*models.Cert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cert indicates an expected call of Cert.
func (mr *MockRepositoryMockRecorder) Cert(ctx, domain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cert", reflect.TypeOf((*MockRepository)(nil).Cert), ctx, domain)
}

// Close mocks base method.
func (m *MockRepository) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockRepositoryMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRepository)(nil).Close))
}
